package com.gambit.tools.sdk.request;

import com.gambit.tools.sdk.GambitRequest;
import com.gambit.tools.sdk.GambitResponse;
import com.gambit.tools.sdk.exceptions.CogsException;
import com.gambit.tools.sdk.response.GambitResponseRandomUUID;
import org.json.JSONObject;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;

public class GambitRequestRandomUUID extends GambitRequest {

    public static class Builder {
        
        /**
        * Obtained through Gambit UI
        */
        protected final String mKeyPublic;
        
        /**
        * Obtained through Gambit UI
        */
        protected final String mKeyPrivate;

        /**
         * Create request builder with keys obtained through Gambit UI
         * @param public_key The access key obtained from Gambit UI
         * @param private_key The secret key obtained from Gambit UI
         */
        public Builder(String public_key, String private_key) {
            this.mKeyPublic = public_key;
            this.mKeyPrivate = private_key;
        }

        /**
         * Obtained through Gambit UI
         * @return The access key obtained from Gambit UI
         */
        public String getPublicKey() {
            return mKeyPublic;
        }

        /**
         * Obtained through Gambit UI
         * @return The secret key obtained from Gambit UI
         */
        public String getPrivateKey() {
            return mKeyPrivate;
        }

        /**
         * Build request object
         * @return An instance of {@link GambitRequestRandomUUID} generated by this {@link Builder}
         */
        public GambitRequestRandomUUID build() {
            return new GambitRequestRandomUUID(this);
        }
    }

    /**
     * The endpoint API method name
     */
    protected static final String endpoint = "random_uuid";
    
    /**
     * Generated request body
     */
    protected String mBody;
    
    /**
     * Obtained through Gambit UI
     */
    protected String mKeyPublic;
    
    /**
     * Obtained through Gambit UI
     */
    protected String mKeyPrivate;

    /**
     * Construct the request object using it's own {@link Builder} instance.
     * @param builder The {@link Builder} object
     */
    protected GambitRequestRandomUUID(Builder builder) {
        mKeyPublic = builder.getPublicKey();
        mKeyPrivate = builder.getPrivateKey();
    }

    /**
     * Build the request URL to execute the API call upon.
     * @return Full request {@link URL}
     */
    @Override
    protected URL getUrl() throws IOException {
        StringBuilder builder = new StringBuilder();
        
        builder.append(getBaseUrl());
        builder.append(endpoint);
        
        URL url = null;
        
        try {
            url = new URL(builder.toString());
        } catch (MalformedURLException ex) {
            throw new CogsException("Invalid format for random UUID request URL.", ex);
        }
        
        return url;
    }

    /**
     * Build a JSON according to specification. This is the actual request body.
     * @return JSON string representation of all needed request parameters
     */
    @Override
    protected String getBody() {
        
        if (mBody == null) {
            JSONObject json = new JSONObject();

            TimeZone tz = TimeZone.getTimeZone("UTC");
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
            df.setTimeZone(tz);
            String nowAsISO = df.format(new Date());

            json.put("access_key", mKeyPublic);
            json.put("timestamp", nowAsISO);
         
            mBody = json.toString();
        }
        
        return mBody;
    }

    /**
     * Inject the HMAC-SHA256 hash as a header to the request
     * @param connection The {@link HttpURLConnection} object that is going to execute the API call.
     */
    @Override
    protected void setRequestParams(HttpURLConnection connection) {
        try {
            connection.setRequestProperty("Payload-HMAC", getHmac(getBody(), mKeyPrivate));
        } catch (Exception ex) {
            throw new CogsException("Error setting request parameters for random UUID request.", ex);
        }
    }

    /**
     * Build {@link GambitResponseRandomUUID} instance, containing the random UUID generated by Gambit
     * @param response The RAW HTTP response body as text
     * @param code The RAW HTTP response code as an integer
     * @return An instance of {@link GambitResponseRandomUUID}
     */
    @Override
    protected GambitResponse getResponse(String response, int code) {
        return new GambitResponseRandomUUID(response, code);
    }
    
    /**
     * Obtained through Gambit UI
     * @return The access key obtained through Gambit UI
     */
    public String getPublicKey() {
        return mKeyPublic;
    }
    
    /**
     * Obtained through Gambit UI
     * @return The secret key, obtained through Gambit UI
     */
    public String getPrivateKey() {
        return mKeyPrivate;
    }

}
